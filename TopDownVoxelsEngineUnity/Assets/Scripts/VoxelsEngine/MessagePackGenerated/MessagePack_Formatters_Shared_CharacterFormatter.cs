// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Shared
{
    public sealed class CharacterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Character>
    {
        // Position
        private static global::System.ReadOnlySpan<byte> GetSpan_Position() => new byte[1 + 8] { 168, 80, 111, 115, 105, 116, 105, 111, 110 };
        // Velocity
        private static global::System.ReadOnlySpan<byte> GetSpan_Velocity() => new byte[1 + 8] { 168, 86, 101, 108, 111, 99, 105, 116, 121 };
        // Angle
        private static global::System.ReadOnlySpan<byte> GetSpan_Angle() => new byte[1 + 5] { 165, 65, 110, 103, 108, 101 };
        // Level
        private static global::System.ReadOnlySpan<byte> GetSpan_Level() => new byte[1 + 5] { 165, 76, 101, 118, 101, 108 };
        // SelectedTool
        private static global::System.ReadOnlySpan<byte> GetSpan_SelectedTool() => new byte[1 + 12] { 172, 83, 101, 108, 101, 99, 116, 101, 100, 84, 111, 111, 108 };
        // SelectedBlock
        private static global::System.ReadOnlySpan<byte> GetSpan_SelectedBlock() => new byte[1 + 13] { 173, 83, 101, 108, 101, 99, 116, 101, 100, 66, 108, 111, 99, 107 };
        // SelectedTemplate
        private static global::System.ReadOnlySpan<byte> GetSpan_SelectedTemplate() => new byte[1 + 16] { 176, 83, 101, 108, 101, 99, 116, 101, 100, 84, 101, 109, 112, 108, 97, 116, 101 };
        // ToolRemoveBlockLevel
        private static global::System.ReadOnlySpan<byte> GetSpan_ToolRemoveBlockLevel() => new byte[1 + 20] { 180, 84, 111, 111, 108, 82, 101, 109, 111, 118, 101, 66, 108, 111, 99, 107, 76, 101, 118, 101, 108 };
        // ToolAddBlockLevel
        private static global::System.ReadOnlySpan<byte> GetSpan_ToolAddBlockLevel() => new byte[1 + 17] { 177, 84, 111, 111, 108, 65, 100, 100, 66, 108, 111, 99, 107, 76, 101, 118, 101, 108 };
        // ToolAddFurnitureLevel
        private static global::System.ReadOnlySpan<byte> GetSpan_ToolAddFurnitureLevel() => new byte[1 + 21] { 181, 84, 111, 111, 108, 65, 100, 100, 70, 117, 114, 110, 105, 116, 117, 114, 101, 76, 101, 118, 101, 108 };
        // ToolReplaceBlockLevel
        private static global::System.ReadOnlySpan<byte> GetSpan_ToolReplaceBlockLevel() => new byte[1 + 21] { 181, 84, 111, 111, 108, 82, 101, 112, 108, 97, 99, 101, 66, 108, 111, 99, 107, 76, 101, 118, 101, 108 };
        // BlocsInventory
        private static global::System.ReadOnlySpan<byte> GetSpan_BlocsInventory() => new byte[1 + 14] { 174, 66, 108, 111, 99, 115, 73, 110, 118, 101, 110, 116, 111, 114, 121 };
        // KnownTemplates
        private static global::System.ReadOnlySpan<byte> GetSpan_KnownTemplates() => new byte[1 + 14] { 174, 75, 110, 111, 119, 110, 84, 101, 109, 112, 108, 97, 116, 101, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Character value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(13);
            writer.WriteRaw(GetSpan_Position());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Vector3>(formatterResolver).Serialize(ref writer, value.Position, options);
            writer.WriteRaw(GetSpan_Velocity());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Vector3>(formatterResolver).Serialize(ref writer, value.Velocity, options);
            writer.WriteRaw(GetSpan_Angle());
            writer.Write(value.Angle);
            writer.WriteRaw(GetSpan_Level());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Level, options);
            writer.WriteRaw(GetSpan_SelectedTool());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.ToolId>(formatterResolver).Serialize(ref writer, value.SelectedTool, options);
            writer.WriteRaw(GetSpan_SelectedBlock());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.BlockId>(formatterResolver).Serialize(ref writer, value.SelectedBlock, options);
            writer.WriteRaw(GetSpan_SelectedTemplate());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.TemplateId>(formatterResolver).Serialize(ref writer, value.SelectedTemplate, options);
            writer.WriteRaw(GetSpan_ToolRemoveBlockLevel());
            writer.Write(value.ToolRemoveBlockLevel);
            writer.WriteRaw(GetSpan_ToolAddBlockLevel());
            writer.Write(value.ToolAddBlockLevel);
            writer.WriteRaw(GetSpan_ToolAddFurnitureLevel());
            writer.Write(value.ToolAddFurnitureLevel);
            writer.WriteRaw(GetSpan_ToolReplaceBlockLevel());
            writer.Write(value.ToolReplaceBlockLevel);
            writer.WriteRaw(GetSpan_BlocsInventory());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::Shared.BlockId, int>>(formatterResolver).Serialize(ref writer, value.BlocsInventory, options);
            writer.WriteRaw(GetSpan_KnownTemplates());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Shared.TemplateId>>(formatterResolver).Serialize(ref writer, value.KnownTemplates, options);
        }

        public global::Shared.Character Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Shared.Character();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 8:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7957695015293251408UL:
                                ____result.Position = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Vector3>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                            case 8751735851679769942UL:
                                ____result.Velocity = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Vector3>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 435610414657UL:
                                ____result.Angle = reader.ReadByte();
                                continue;
                            case 465558725964UL:
                                ____result.Level = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;
                        }
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SelectedTool().Slice(1))) { goto FAIL; }

                        ____result.SelectedTool = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.ToolId>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SelectedBlock().Slice(1))) { goto FAIL; }

                        ____result.SelectedBlock = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.BlockId>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 16:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SelectedTemplate().Slice(1))) { goto FAIL; }

                        ____result.SelectedTemplate = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.TemplateId>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 20:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ToolRemoveBlockLevel().Slice(1))) { goto FAIL; }

                        ____result.ToolRemoveBlockLevel = reader.ReadByte();
                        continue;
                    case 17:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ToolAddBlockLevel().Slice(1))) { goto FAIL; }

                        ____result.ToolAddBlockLevel = reader.ReadByte();
                        continue;
                    case 21:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 5072289312480915284UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ToolAddFurnitureLevel().Slice(1 + 8))) { goto FAIL; }

                                ____result.ToolAddFurnitureLevel = reader.ReadByte();
                                continue;

                            case 7813856758168776532UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ToolReplaceBlockLevel().Slice(1 + 8))) { goto FAIL; }

                                ____result.ToolReplaceBlockLevel = reader.ReadByte();
                                continue;

                        }
                    case 14:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8533839103851981890UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 133532403134053UL) { goto FAIL; }

                                ____result.BlocsInventory = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<global::Shared.BlockId, int>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7882799556208848459UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126879581432944UL) { goto FAIL; }

                                ____result.KnownTemplates = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Shared.TemplateId>>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
