// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Shared
{
    public sealed class GameStateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.GameState>
    {
        // IsApplyingEvent
        private static global::System.ReadOnlySpan<byte> GetSpan_IsApplyingEvent() => new byte[1 + 15] { 175, 73, 115, 65, 112, 112, 108, 121, 105, 110, 103, 69, 118, 101, 110, 116 };
        // Characters
        private static global::System.ReadOnlySpan<byte> GetSpan_Characters() => new byte[1 + 10] { 170, 67, 104, 97, 114, 97, 99, 116, 101, 114, 115 };
        // NPCs
        private static global::System.ReadOnlySpan<byte> GetSpan_NPCs() => new byte[1 + 4] { 164, 78, 80, 67, 115 };
        // Levels
        private static global::System.ReadOnlySpan<byte> GetSpan_Levels() => new byte[1 + 6] { 166, 76, 101, 118, 101, 108, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.GameState value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_IsApplyingEvent());
            writer.Write(value.IsApplyingEvent);
            writer.WriteRaw(GetSpan_Characters());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::LoneStoneStudio.Tools.ReactiveDictionary<short, global::Shared.Character>>(formatterResolver).Serialize(ref writer, value.Characters, options);
            writer.WriteRaw(GetSpan_NPCs());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::LoneStoneStudio.Tools.ReactiveList<global::Shared.NPC>>(formatterResolver).Serialize(ref writer, value.NPCs, options);
            writer.WriteRaw(GetSpan_Levels());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::LoneStoneStudio.Tools.ReactiveDictionary<string, global::Shared.LevelMap>>(formatterResolver).Serialize(ref writer, value.Levels, options);
        }

        public global::Shared.GameState Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Characters__ = default(global::LoneStoneStudio.Tools.ReactiveDictionary<short, global::Shared.Character>);
            var __NPCs__ = default(global::LoneStoneStudio.Tools.ReactiveList<global::Shared.NPC>);
            var __Levels__ = default(global::LoneStoneStudio.Tools.ReactiveDictionary<string, global::Shared.LevelMap>);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 15:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_IsApplyingEvent().Slice(1))) { goto FAIL; }

                        reader.Skip();
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Characters().Slice(1))) { goto FAIL; }

                        __Characters__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::LoneStoneStudio.Tools.ReactiveDictionary<short, global::Shared.Character>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1933791310UL) { goto FAIL; }

                        __NPCs__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::LoneStoneStudio.Tools.ReactiveList<global::Shared.NPC>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126909395920204UL) { goto FAIL; }

                        __Levels__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::LoneStoneStudio.Tools.ReactiveDictionary<string, global::Shared.LevelMap>>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::Shared.GameState(__Characters__, __NPCs__, __Levels__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
