// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Shared
{
    public sealed class LevelMapFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.LevelMap>
    {
        // Chunks
        private static global::System.ReadOnlySpan<byte> GetSpan_Chunks() => new byte[1 + 6] { 166, 67, 104, 117, 110, 107, 115 };
        // Npcs
        private static global::System.ReadOnlySpan<byte> GetSpan_Npcs() => new byte[1 + 4] { 164, 78, 112, 99, 115 };
        // LevelId
        private static global::System.ReadOnlySpan<byte> GetSpan_LevelId() => new byte[1 + 7] { 167, 76, 101, 118, 101, 108, 73, 100 };
        // SpawnPosition
        private static global::System.ReadOnlySpan<byte> GetSpan_SpawnPosition() => new byte[1 + 13] { 173, 83, 112, 97, 119, 110, 80, 111, 115, 105, 116, 105, 111, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.LevelMap value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_Chunks());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Chunk[,]>(formatterResolver).Serialize(ref writer, value.Chunks, options);
            writer.WriteRaw(GetSpan_Npcs());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::LoneStoneStudio.Tools.ReactiveList<global::Shared.NPC>>(formatterResolver).Serialize(ref writer, value.Npcs, options);
            writer.WriteRaw(GetSpan_LevelId());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.LevelId, options);
            writer.WriteRaw(GetSpan_SpawnPosition());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Vector3>(formatterResolver).Serialize(ref writer, value.SpawnPosition, options);
        }

        public global::Shared.LevelMap Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Chunks__IsInitialized = false;
            var __Chunks__ = default(global::Shared.Chunk[,]);
            var __Npcs__IsInitialized = false;
            var __Npcs__ = default(global::LoneStoneStudio.Tools.ReactiveList<global::Shared.NPC>);
            var __LevelId__ = default(string);
            var __SpawnPosition__ = default(global::Shared.Vector3);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 6:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 126905251883075UL) { goto FAIL; }

                        __Chunks__IsInitialized = true;
                        __Chunks__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Chunk[,]>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1935896654UL) { goto FAIL; }

                        __Npcs__IsInitialized = true;
                        __Npcs__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::LoneStoneStudio.Tools.ReactiveList<global::Shared.NPC>>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228227578619212UL) { goto FAIL; }

                        __LevelId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 13:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SpawnPosition().Slice(1))) { goto FAIL; }

                        __SpawnPosition__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Vector3>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::Shared.LevelMap(__LevelId__, __SpawnPosition__);
            if (__Chunks__IsInitialized)
            {
                ____result.Chunks = __Chunks__;
            }

            if (__Npcs__IsInitialized)
            {
                ____result.Npcs = __Npcs__;
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
