// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.VoxelsEngine.Data
{
    public sealed class FrameTextureConfigurationFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::VoxelsEngine.Data.FrameTextureConfiguration>
    {
        // FrameAlbedoTexture
        private static global::System.ReadOnlySpan<byte> GetSpan_FrameAlbedoTexture() => new byte[1 + 18] { 178, 70, 114, 97, 109, 101, 65, 108, 98, 101, 100, 111, 84, 101, 120, 116, 117, 114, 101 };
        // FrameNormalsTexture
        private static global::System.ReadOnlySpan<byte> GetSpan_FrameNormalsTexture() => new byte[1 + 19] { 179, 70, 114, 97, 109, 101, 78, 111, 114, 109, 97, 108, 115, 84, 101, 120, 116, 117, 114, 101 };
        // FrameHeightsTexture
        private static global::System.ReadOnlySpan<byte> GetSpan_FrameHeightsTexture() => new byte[1 + 19] { 179, 70, 114, 97, 109, 101, 72, 101, 105, 103, 104, 116, 115, 84, 101, 120, 116, 117, 114, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::VoxelsEngine.Data.FrameTextureConfiguration value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_FrameAlbedoTexture());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.FrameAlbedoTexture, options);
            writer.WriteRaw(GetSpan_FrameNormalsTexture());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.FrameNormalsTexture, options);
            writer.WriteRaw(GetSpan_FrameHeightsTexture());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.FrameHeightsTexture, options);
        }

        public global::VoxelsEngine.Data.FrameTextureConfiguration Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::VoxelsEngine.Data.FrameTextureConfiguration();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 18:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_FrameAlbedoTexture().Slice(1))) { goto FAIL; }

                        ____result.FrameAlbedoTexture = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 19:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8245895640272433734UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_FrameNormalsTexture().Slice(1 + 8))) { goto FAIL; }

                                ____result.FrameNormalsTexture = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                            case 7594555947094209094UL:
                                if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_FrameHeightsTexture().Slice(1 + 8))) { goto FAIL; }

                                ____result.FrameHeightsTexture = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
