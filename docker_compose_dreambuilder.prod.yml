services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dreambuilder-server
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=dreambuilder;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - TZ=UTC
    volumes:
      - streaming-assets:/app/StreamingAssets
    networks:
      - dokploy-network
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  postgres:
    image: postgres:15-alpine
    container_name: dreambuilder-db
    environment:
      - POSTGRES_DB=dreambuilder
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=UTC
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - dokploy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d dreambuilder"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 1G

volumes:
  postgres_data:
  streaming-assets:
networks:
  dokploy-network:
    external: true